Problem statement
Check whether a given number ’n’ is a palindrome number.

Note :
Palindrome numbers are the numbers that don't change when reversed.
You don’t need to print anything. Just implement the given function.
Example:
Input: 'n' = 51415
Output: true
Explanation: On reversing, 51415 gives 51415.


*************************************************************************************
bool palindrome(int n)
{
    // Write your code here
    cin>>n;
    int z=n;
    int count =0;
    int r=0;
    while(n>0){
        int x= n%10;
        r=r*10+x;
        n=n/10;
    }
    if(r==z){
        return true;
    }
    else 
    return false;
}


Problem statement
You are given two integers 'n', and 'm'.



Calculate 'gcd(n,m)', without using library functions.



Note:
The greatest common divisor (gcd) of two numbers 'n' and 'm' is the largest positive number that divides both 'n' and 'm' without leaving a remainder.


Example:
Input: 'n' = 6, 'm' = 4

Output: 2

Explanation:
Here, gcd(4,6) = 2, because 2 is the largest positive integer that divides both 4 and 6.


Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
9 6


Sample Output 1:
3


Explanation of sample output 1:
gcd(6,9) is 3, as 3 is the largest positive integer that divides both 6 and 9.

Sample Input 2:
2 5


Sample Output 2:
1


Expected Time Complexity:
Try to solve this in O(log(n)) 


Constraints:
0 <= ‘n’ <= 10^5

Time Limit: 1 sec



int calcGCD(int n, int m){
    // Write your code here.
    cin>>n>>m;
  
        int i=1;
        int ans=1;
        while(i<=min(n,m)){
        if(n%i==0 && m%i==0){
            ans=i;
        }
        i++;
        }
        return ans;
}
