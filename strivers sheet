Problem statement
Check whether a given number ’n’ is a palindrome number.

Note :
Palindrome numbers are the numbers that don't change when reversed.
You don’t need to print anything. Just implement the given function.
Example:
Input: 'n' = 51415
Output: true
Explanation: On reversing, 51415 gives 51415.


*************************************************************************************
bool palindrome(int n)
{
    // Write your code here
    cin>>n;
    int z=n;
    int count =0;
    int r=0;
    while(n>0){
        int x= n%10;
        r=r*10+x;
        n=n/10;
    }
    if(r==z){
        return true;
    }
    else 
    return false;
}


Problem statement
You are given two integers 'n', and 'm'.



Calculate 'gcd(n,m)', without using library functions.



Note:
The greatest common divisor (gcd) of two numbers 'n' and 'm' is the largest positive number that divides both 'n' and 'm' without leaving a remainder.


Example:
Input: 'n' = 6, 'm' = 4

Output: 2

Explanation:
Here, gcd(4,6) = 2, because 2 is the largest positive integer that divides both 4 and 6.


Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
9 6


Sample Output 1:
3


Explanation of sample output 1:
gcd(6,9) is 3, as 3 is the largest positive integer that divides both 6 and 9.

Sample Input 2:
2 5


Sample Output 2:
1


Expected Time Complexity:
Try to solve this in O(log(n)) 


Constraints:
0 <= ‘n’ <= 10^5

Time Limit: 1 sec



int calcGCD(int n, int m){
    // Write your code here.
    cin>>n>>m;
  
        int i=1;
        int ans=1;
        while(i<=min(n,m)){
        if(n%i==0 && m%i==0){
            ans=i;
        }
        i++;
        }
        return ans;
}



Problem statement
You are given an integer 'n'. Return 'true' if 'n' is an Armstrong number, and 'false' otherwise.



Note:
An Armstrong number is a number (with 'k' digits) such that the sum of its digits raised to 'kth' power is equal to the 
number itself. For example, 371 is an Armstrong number because 3^3 + 7^3 + 1^3 = 371.


#include <math.h>
bool checkArmstrong(int n){
	//Write your code here
	cin>>n;
	int z=n;
	int c=n;

	int ans=0,mod,count=0,arm=0;
	while(n>0){
		n=n/10;
		count=count+1;
		
	}


	while(z>0){
		mod=z%10;
		arm=pow(mod,count)+arm;
		z=z/10;

	}

	

	if(c==arm){
		return true;
	}
	else
	return false;
}


Problem statement
You are given an integer ‘n’.



Function ‘sumOfDivisors(n)’ is defined as the sum of all divisors of ‘n’.



Find the sum of ‘sumOfDivisors(i)’ for all ‘i’ from 1 to ‘n’.



Example:
Input: ‘n’  = 5

Output: 21

Explanation:
We need to find the sum of ‘sumOfDivisors(i)’ for all ‘i’ from 1 to 5. 
‘sumOfDivisors(1)’ = 1
‘sumOfDivisors(2)’ = 2 + 1 = 3
‘sumOfDivisors(3)’ = 3 + 1 = 4
‘sumOfDivisors(4)’ = 4 + 2 +1 = 7 
‘sumOfDivisors(5)’ = 5 + 1 = 6
Therefore our answer is sumOfDivisors(1) + sumOfDivisors(2) + sumOfDivisors(3) + sumOfDivisors(4) + sumOfDivisors(5) = 1 + 3 + 4 + 7 + 6 = 21.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
3


Sample Output 1:
8


Explanation of sample output 1:
We need to find sumOfDivisors(1) + sumOfDivisors(2) +sumOfDivisors(3).
sumOfDivisors(1) = 1
sumOfDivisors(2) = 2 + 1 = 3
sumOfDivisors(3) = 3 + 1 = 4
Therefore, the answer is sumOfDivisors(1) + sumOfDivisors(2) + sumOfDivisors(3) = 1 + 3 + 4 = 8. 

Sample Input 2:
10


Sample Output 2:
87


Expected Time Complexity:
Try to solve this in O(sqrt(‘n’)).


Constraints:
1 <= ‘n’ <= 3*10^4

Time Limit: 1 sec


int sumOfAllDivisors(int n){
	// Write your code here.	
	cin>>n;
	int ans=0,i=1;
	while(i<=n){
		int x=1;
		while(x<=i){
                  if (i % x == 0) {
                    ans = x + ans;
					
                  }
				  x++;
                }
				i++;
	}
	return ans;
}


Problem statement
A prime number is a positive integer that is divisible by exactly 2 integers, 1 and the number itself.



You are given a number 'n'.



Find out whether 'n' is prime or not.



Example :
Input: 'n' = 5

Output: YES

Explanation: 5 is only divisible by 1 and 5. 2, 3 and 4 do not divide 5.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
5


Sample Output 1:
YES


Explanation of sample input 1 :
5 is only divisible by 1 and 5. 2, 3 and 4 do not divide 5.


Sample Input 2:
6


Sample Output 2:
NO


Explanation of sample input 2 :
6 is divisible by 1, 2, 3, and 6. Therefore it is not a prime number.
Numbers having more than two factors are known as composite numbers.


Sample Input 3:
1


Sample Output 3:
NO


Explanation of sample input 3 :
1 is divisible only by 1, having only one factor. Therefore it is not a prime number.
1 is neither a prime nor a composite number.


Expected time complexity :
The expected time complexity is O(sqrt('n')).


Constraints :
1 <= 'n' <= 10 ^ 9

Time limit: 1 second


bool isPrime(int n)
{
	// Write your code here.
	int i=2;
	while(i<n/2){
		if(n%i==0){
			return false;
			break;
        } 
		i++;
        }
}


